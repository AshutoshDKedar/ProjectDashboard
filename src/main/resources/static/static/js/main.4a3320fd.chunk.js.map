{"version":3,"sources":["components/Navbar.js","actions/ProjectTaskActions.js","actions/types.js","components/ProjectTask/ProjectTaskItem.js","components/ProjectBoard.js","components/ProjectTask/AddProjectTask.js","reducers/errorReducers.js","reducers/projectTaskReducers.js","reducers/index.js","store.js","components/ProjectTask/UpdateProjectTask.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","addProjectTask","project_task","history","dispatch","a","axios","post","push","payload","response","data","ProjectTaskItem","pt_id","this","props","deleteProjectTask","id","summary","acceptanceCriteria","to","onClick","onDeleteClick","bind","Component","connect","window","confirm","delete","ProjectBoard","getBacklog","BoardContent","project_tasks","todoItems","inProgressItems","doneItems","length","role","tasks","map","key","console","log","i","status","Fragment","BoardAlgorithm","state","get","res","AddProjectTask","errors","onChange","onSubmit","nextProps","setState","e","target","name","value","preventDefault","newProjectTask","classnames","placeholder","error","initialState","combineReducers","action","filter","middleware","thunk","store","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducers","compose","applyMiddleware","UpdateProjectTask","match","params","getProjectTask","updatedTask","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4a3320fd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Navbar() {\r\n    return(\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\r\n            <div className=\"container\">\r\n                <a className=\"navbar-brand\" href=\"/\">\r\n                    Project Task Tool\r\n                </a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                    <span className=\"navbar-toggler-icon\"/>\r\n                </button>\r\n            </div>\r\n        </nav>\r\n    )\r\n    \r\n}","import axios from \"axios\";\r\nimport {DELETE_PROJECT_TASKS, GET_ERRORS, GET_PROJECT_TASK, GET_PROJECT_TASKS} from \"./types\";\r\n\r\nexport const addProjectTask = (project_task,history) => async dispatch =>{\r\n\r\n    try{\r\n        await axios.post(\"/api/board\",project_task);\r\n        history.push(\"/\");\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload:{}\r\n        });\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type:GET_ERRORS,\r\n            payload:error.response.data\r\n        });\r\n    }\r\n};\r\n\r\nexport const getBacklog = () => async dispatch => {\r\n    const res = await axios.get(\"/api/board/all\");\r\n    dispatch({\r\n        type:GET_PROJECT_TASKS,\r\n        payload:res.data\r\n    })\r\n};\r\n\r\nexport const deleteProjectTask = pt_id => async dispatch => {\r\n    if(window.confirm('Are you sure you want to delete Project Task ' + pt_id)\r\n    ) {\r\n        await axios.delete(\"/api/board/\"+pt_id);\r\n        dispatch({\r\n            type: DELETE_PROJECT_TASKS,\r\n            payload:pt_id\r\n        });\r\n    }\r\n};\r\n\r\nexport const getProjectTask = (pt_id,history) => async dispatch => {\r\n    try{\r\n        const res = await axios.get(\"/api/board/\"+pt_id);\r\n        dispatch({\r\n            type: GET_PROJECT_TASK,\r\n            payload:res.data\r\n        })\r\n    }\r\n        catch (error) {\r\n            history.push(\"/\")\r\n        }\r\n};","export const GET_ERRORS = \"GET_ERROR\";\r\nexport const GET_PROJECT_TASKS = \"GET_PROJECT_TASKS\";\r\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\nexport const DELETE_PROJECT_TASKS = \"DELETE_PROJECT_TASKS\";","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\nimport {deleteProjectTask} from \"../../actions/ProjectTaskActions\";\r\n\r\nclass ProjectTaskItem extends Component {\r\n\r\n    onDeleteClick(pt_id){\r\n        this.props.deleteProjectTask(pt_id);\r\n    }\r\n\r\n    render() {\r\n        const {project_task} = this.props;\r\n        return (\r\n            <div>\r\n                <div className=\"card mb-1 bg-light\">\r\n\r\n                    <div className=\"card-header text-primary\">\r\n                        ID: {project_task.id}\r\n                    </div>\r\n                    <div className=\"card-body bg-light\">\r\n                        <h5 className=\"card-title\">{project_task.summary}</h5>\r\n                        <p className=\"card-text text-truncate \">\r\n                            {project_task.acceptanceCriteria}\r\n                        </p>\r\n                        <Link to={\"updatedProjectTask/\"+project_task.id} className=\"btn btn-primary\">\r\n                            View / Update\r\n                        </Link>\r\n\r\n                        <button className=\"btn btn-danger ml-4\"\r\n                        onClick={this.onDeleteClick.bind(this, project_task.id)}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nProjectTaskItem.propTypes = {\r\n    deleteProjectTask: PropTypes.func.isRequired\r\n};\r\nexport default connect(null,{deleteProjectTask}) (ProjectTaskItem);","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ProjectTaskItem from \"./ProjectTask/ProjectTaskItem\";\r\nimport {connect} from \"react-redux\";\r\nimport PropTypes from \"prop-types\"\r\nimport {getBacklog} from \"../actions/ProjectTaskActions\";\r\n\r\nclass ProjectBoard extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getBacklog();\r\n    }\r\n\r\n    render() {\r\n        const {project_tasks} = this.props.project_tasks;\r\n\r\n        let BoardContent;\r\n\r\n        let todoItems = [];\r\n        let inProgressItems = [];\r\n        let doneItems = [];\r\n\r\n        const BoardAlgorithm = project_tasks =>{\r\n            if(project_tasks.length < 1){\r\n                return(\r\n                    <div className={\"alert alert-info text-center\"} role={\"alert\"}>\r\n                        No Project Task found\r\n                    </div>\r\n\r\n                )\r\n            }\r\n            else{\r\n                const tasks = project_tasks.map(project_task =>(\r\n                    <ProjectTaskItem key = {project_task.id} project_task = {project_task}/>\r\n                ));\r\n                console.log(tasks);\r\n                for(let i=0;i<tasks.length;i++){\r\n                    let task = tasks[i].props.project_task.status;\r\n                    switch (task) {\r\n                        case \"TO_DO\":\r\n                            todoItems.push(tasks[i]);\r\n                            break;\r\n                        case \"IN_PROGRESS\":\r\n                            inProgressItems.push(tasks[i]);\r\n                            break;\r\n                        case \"DONE\":\r\n                            doneItems.push(tasks[i]);\r\n                            break;\r\n\r\n                    }\r\n                }\r\n                return (\r\n                    <React.Fragment>\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-4\">\r\n                                    <div className=\"card text-center mb-2\">\r\n                                        <div className=\"card-header bg-secondary text-white\">\r\n                                            <h3>TO DO</h3>\r\n                                        </div>\r\n                                    </div>\r\n                                    {todoItems}\r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                    <div className=\"card text-center mb-2\">\r\n                                        <div className=\"card-header bg-primary text-white\">\r\n                                            <h3>In Progress</h3>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {inProgressItems}\r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                    <div className=\"card text-center mb-2\">\r\n                                        <div className=\"card-header bg-success text-white\">\r\n                                            <h3>Done</h3>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {doneItems}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </React.Fragment>\r\n                )\r\n            }\r\n        };\r\n\r\n      BoardContent =   BoardAlgorithm(project_tasks);\r\n        return (\r\n            <div className=\"container\">\r\n                <Link to=\"/AddProjectTask\" className=\"btn btn-primary mb-3\">\r\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\r\n                </Link>\r\n                <br />\r\n                <hr />\r\n                {BoardContent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nProjectBoard.propTypes = {\r\n    getBacklog: PropTypes.func.isRequired,\r\n    project_tasks: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state =>({\r\n    project_tasks: state.project_tasks\r\n});\r\n\r\nexport default connect(mapStateToProps,{getBacklog}) (ProjectBoard);","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\"\r\nimport {connect} from \"react-redux\";\r\nimport {addProjectTask} from \"../../actions/ProjectTaskActions\";\r\nimport classnames from \"classnames\";\r\nclass AddProjectTask extends Component {\r\nconstructor() {\r\n    super();\r\n    this.state = {\r\n        summary: \"\",\r\n        acceptanceCriteria: \"\",\r\n        status: \"\",\r\n        errors: {}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n}\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\nonChange(e){\r\n    this.setState({[e.target.name]:e.target.value})\r\n}\r\nonSubmit(e){\r\n    e.preventDefault();\r\n    const newProjectTask = {\r\n        summary:this.state.summary,\r\n        acceptanceCriteria:this.state.acceptanceCriteria,\r\n        status:this.state.status\r\n    };\r\n    //console.log(newProjectTask);\r\n    this.props.addProjectTask(newProjectTask,this.props.history);\r\n}\r\n    render() {\r\n    const {errors} = this.state;\r\n        return (\r\n            <div className=\"addProjectTask\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <Link to=\"/\" className=\"btn btn-light\">\r\n                                Back to Board\r\n                            </Link>\r\n                            <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\",\r\n                                        {\r\n                                            \"is-invalid\":errors.summary\r\n                                        })}\r\n                                           name=\"summary\"\r\n                                           placeholder=\"Project Task summary\"\r\n                                            value={this.state.summary}\r\n                                           onChange={this.onChange}\r\n                                    />\r\n                                    {\r\n                                        errors.summary &&(\r\n                                            <div className={\"invalid-feedback\"}>{errors.summary}</div>\r\n                                        )\r\n\r\n                                    }\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea className=\"form-control form-control-lg\" placeholder=\"Acceptance Criteria\"\r\n                                              name=\"acceptanceCriteria\"\r\n                                              value={this.state.acceptanceCriteria}\r\n                                              onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </textarea>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <select className=\"form-control form-control-lg\" name=\"status\"\r\n                                            value={this.state.status}\r\n                                            onChange={this.onChange}\r\n                                    >\r\n                                        <option value=\"\">Select Status</option>\r\n                                        <option value=\"TO_DO\">TO DO</option>\r\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                                        <option value=\"DONE\">DONE</option>\r\n                                    </select>\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\"/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToprops = state => ({\r\n    errors:state.error\r\n});\r\n\r\nAddProjectTask.propTypes = {\r\n    addProjectTask: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToprops,{addProjectTask}) (AddProjectTask);","import {GET_ERRORS} from \"../actions/types\";\r\n\r\nconst initialState = {}\r\n\r\nexport default function (state = initialState,action) {\r\n    switch (action.type) {\r\n\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {DELETE_PROJECT_TASKS, GET_PROJECT_TASK, GET_PROJECT_TASKS} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    project_tasks:[],\r\n    project_task: {}\r\n};\r\nexport default function (state = initialState,action) {\r\n    switch (action.type) {\r\n        case GET_PROJECT_TASKS:\r\n            return{\r\n                ...state,\r\n                project_tasks: action.payload\r\n            };\r\n        case GET_PROJECT_TASK:\r\n            return{\r\n                ...state,\r\n                project_task : action.payload\r\n            }\r\n        case DELETE_PROJECT_TASKS:\r\n            return {\r\n                ...state,\r\n                project_tasks: state.project_tasks.filter(\r\n                    project_task => project_task.id !== action.payload\r\n                )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport errorReducers from \"./errorReducers\";\r\nimport projectTaskReducers from \"./projectTaskReducers\";\r\n\r\nexport default combineReducers({\r\n\r\n    errors: errorReducers,\r\n    project_tasks:projectTaskReducers\r\n});\r\n\r\n","import {createStore,applyMiddleware,compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducers from \"./reducers\";\r\n\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__&&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__()\r\nlet store;\r\n\r\n// if(window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools){\r\n//     store = createStore(\r\n//         rootReducers,\r\n//         initialState,\r\n//         compose(applyMiddleware(...middleware),ReactReduxDevTools)\r\n//     );\r\n// }\r\n// else{\r\n    store = createStore(\r\n        rootReducers,\r\n        initialState,\r\n        compose(applyMiddleware(...middleware))\r\n    );\r\n// }\r\n\r\nexport default store;","import React, {Component} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from \"react-redux\";\r\nimport classnames from \"classnames\";\r\nimport {addProjectTask, getProjectTask} from \"../../actions/ProjectTaskActions\";\r\n\r\nclass UpdateProjectTask extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n           summary:\"\",\r\n            acceptanceCriteria:\"\",\r\n            status:\"\",\r\n            errors:{}\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    componentDidMount() {\r\n   const {pt_id} = this.props.match.params;\r\n   this.props.getProjectTask(pt_id);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.errors){\r\n            this.setState({errors:nextProps.errors})\r\n        }\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n        const {id,summary,acceptanceCriteria,status} = nextProps.project_task;\r\n        this.setState({\r\n            id,summary,acceptanceCriteria,status\r\n        });\r\n    }\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        const updatedTask = {\r\n            id: this.state.id,\r\n            summary: this.state.summary,\r\n            acceptanceCriteria: this.state.acceptanceCriteria,\r\n            status: this.state.status\r\n        };\r\n\r\n        this.props.addProjectTask(updatedTask, this.props.history);\r\n\r\n    }\r\n    onChange(e){\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return (\r\n            <div className=\"addProjectTask\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <a href=\"/\" className=\"btn btn-light\">\r\n                                Back to Board\r\n                            </a>\r\n                            <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\",{\r\n                                        \"is-invalid\":errors.summary\r\n                                    })} name=\"summary\"\r\n                                           placeholder=\"Project Task summary\"\r\n                                            value={this.state.summary}\r\n                                           onChange={this.onChange}\r\n                                    />\r\n                                    {errors.summary &&(\r\n                                        <div className={\"invalid-feedback\"}>{errors.summary}</div>\r\n                                    )\r\n                                    }\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <textarea className=\"form-control form-control-lg\" placeholder=\"Acceptance Criteria\"\r\n                                              name=\"acceptanceCriteria\"\r\n                                              value={this.state.acceptanceCriteria}\r\n                                              onChange={this.onChange}\r\n                                    >\r\n\r\n                                    </textarea>\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <select className=\"form-control form-control-lg\" name=\"status\"\r\n                                    value={this.state.status}\r\n                                            onChange={this.onChange}\r\n                                    >\r\n                                        <option value=\"\">Select Status</option>\r\n                                        <option value=\"TO_DO\">TO DO</option>\r\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                                        <option value=\"DONE\">DONE</option>\r\n                                    </select>\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\"/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nUpdateProjectTask.propTypes = {\r\n    project_task: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    getProjectTask: PropTypes.func.isRequired,\r\n    addProjectTask:PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state =>({\r\n    project_task: state.project_tasks.project_task,\r\n    errors: state.errors\r\n});\r\nexport default connect(mapStateToProps,{getProjectTask,addProjectTask}) (UpdateProjectTask);","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"./components/Navbar\";\nimport ProjectBoard from \"./components/ProjectBoard\";\nimport {BrowserRouter as Router,Route} from \"react-router-dom\";\nimport AddProjectTask from \"./components/ProjectTask/AddProjectTask\";\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\nimport UpdateProjectTask from \"./components/ProjectTask/UpdateProjectTask\";\nimport 'react-app-polyfill/stable'\n\nfunction App() {\n  return (\n      <Provider store={store}>\n      <Router>\n    <div className=\"App\">\n\n        <Navbar/>\n        <Route exact path = \"/\" component = {ProjectBoard}/>\n        <Route exact path = \"/AddProjectTask\" component = {AddProjectTask}/>\n        <Route exact path = \"/updatedProjectTask/:pt_id\" component = {UpdateProjectTask}/>\n    </div>\n      </Router>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}